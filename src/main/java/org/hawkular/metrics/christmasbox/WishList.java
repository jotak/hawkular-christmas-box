/*
 * Copyright 2016 Red Hat, Inc. and/or its affiliates
 * and other contributors as indicated by the @author tags.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.hawkular.metrics.christmasbox;

import java.util.ArrayList;
import java.util.Base64;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.function.Function;
import java.util.regex.Pattern;

public class WishList {

    private static final String KEY_HEADER_TENANT = "Hawkular-Tenant";
    private static final String KEY_HEADER_AUTHORIZATION = "Authorization";

    private String uri = "http://localhost:8080";
    private Map<String, String> headers = new HashMap<>();
    private Optional<String> prefix = Optional.empty();
    private Optional<Function<String, HawkularHttpClient>> httpClientProvider = Optional.empty();
    private final Map<String, String> globalTags = new HashMap<>();
    private final Map<String, Map<String, String>> perMetricTags = new HashMap<>();
    private final Collection<RegexTags> regexTags = new ArrayList<>();
    private boolean enableAutoTagging = true;

    /**
     * Create a new builder for an {@link HawkularChristmasBox}
     * @param tenant the Hawkular tenant ID
     */
    public WishList(String tenant) {
        headers.put(KEY_HEADER_TENANT, tenant);
    }

    /**
     * Set the URI for the Hawkular connection. Default URI is http://localhost:8080
     * @param uri base uri - do not include Hawkular Metrics path (/hawkular/metrics)
     */
    public WishList uri(String uri) {
        this.uri = uri;
        return this;
    }

    /**
     * Set username and password for basic HTTP authentication
     * @param username basic auth. username
     * @param password basic auth. password
     */
    public WishList basicAuth(String username, String password) {
        String encoded = Base64.getEncoder().encodeToString((username + ":" + password).getBytes());
        headers.put(KEY_HEADER_AUTHORIZATION, "Basic " + encoded);
        return this;
    }

    /**
     * Set the bearer token for the Authorization header in Hawkular HTTP connections. Can be used, for instance, for
     * OpenShift connections
     * @param token the bearer token
     */
    public WishList bearerToken(String token) {
        headers.put(KEY_HEADER_AUTHORIZATION, "Bearer " + token);
        return this;
    }

    /**
     * Add a custom header to Hawkular HTTP connections
     * @param key header name
     * @param value header value
     */
    public WishList addHeader(String key, String value) {
        headers.put(key, value);
        return this;
    }

    /**
     * Configure a prefix for each metric name. Optional, but useful to identify single hosts
     */
    public WishList prefixedWith(String prefix) {
        this.prefix = Optional.of(prefix);
        return this;
    }

    /**
     * Set all global tags at once. All metrics generated by this reporter instance will be tagged as such.
     * It overrides any global tag that was already set.
     * @param tags global tags
     */
    public WishList globalTags(Map<String, String> tags) {
        this.globalTags.clear();
        this.globalTags.putAll(tags);
        return this;
    }

    /**
     * Set a global tag. All metrics generated by this reporter instance will be tagged as such.
     * @param key tag key
     * @param value tag value
     */
    public WishList addGlobalTag(String key, String value) {
        this.globalTags.put(key, value);
        return this;
    }

    /**
     * Set all per-metric tags at once. It overrides any per-metric tag that was already set.
     * @param tags per-metric tags
     */
    public WishList perMetricTags(Map<String, Map<String, String>> tags) {
        this.perMetricTags.clear();
        this.regexTags.clear();
        tags.forEach((k,v) -> {
            Optional<RegexTags> optRegexTags = RegexTags.checkAndCreate(k, v);
            if (optRegexTags.isPresent()) {
                this.regexTags.add(optRegexTags.get());
            } else {
                this.perMetricTags.put(k, v);
            }
        });
        return this;
    }

    /**
     * Set a tag on a given metric name
     * @param metric the metric name
     * @param key tag key
     * @param value tag value
     */
    public WishList addMetricTag(String metric, String key, String value) {
        Optional<RegexTags> optRegexTags = RegexTags.checkAndCreate(metric, Collections.singletonMap(key, value));
        if (optRegexTags.isPresent()) {
            regexTags.add(optRegexTags.get());
        } else {
            final Map<String, String> tags;
            if (perMetricTags.containsKey(metric)) {
                tags = perMetricTags.get(metric);
            } else {
                tags = new HashMap<>();
                perMetricTags.put(metric, tags);
            }
            tags.put(key, value);
        }
        return this;
    }

    /**
     * Set a tag on a given metric name
     * @param pattern the regex pattern
     * @param key tag key
     * @param value tag value
     */
    public WishList addRegexTag(Pattern pattern, String key, String value) {
        regexTags.add(new RegexTags(pattern, Collections.singletonMap(key, value)));
        return this;
    }

    /**
     * Disable auto-tagging. By default, it is enabled.<br/>
     * When enabled, some metric types such as Meters or Timers will automatically generate additional information as
     * tags. For instance, a Meter metric will generate a tag "meter:5min" on its 5-minutes-rate component.
     */
    public WishList disableAutoTagging() {
        enableAutoTagging = false;
        return this;
    }

    /**
     * Use a custom {@link HawkularHttpClient}
     * @param httpClientProvider function that provides a custom {@link HawkularHttpClient} from input URI as String
     */
    public WishList useHttpClient(Function<String, HawkularHttpClient> httpClientProvider) {
        this.httpClientProvider = Optional.of(httpClientProvider);
        return this;
    }

    /**
     * Build the {@link HawkularChristmasBox}
     */
    public HawkularChristmasBox sendToSanta() {
        HawkularHttpClient client = httpClientProvider
                .map(provider -> provider.apply(uri))
                .orElseGet(() -> new JdkHawkularHttpClient(uri));
        client.addHeaders(headers);
        return new HawkularChristmasBox(client, prefix, globalTags, perMetricTags, regexTags, enableAutoTagging);
    }
}
